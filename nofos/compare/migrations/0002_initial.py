# Generated by Django 5.2.7 on 2025-10-13 22:00

import uuid

import django.core.validators
import django.db.models.deletion
import martor.models
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("compare", "0001_legacy_guides_cleanup_if_exists"),
        ("nofos", "0119_nofo_updated_by"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="CompareDocument",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                (
                    "filename",
                    models.CharField(
                        blank=True,
                        help_text="The filename used to import this document. If re-imported, this value is the most recent filename.",
                        max_length=511,
                        null=True,
                        validators=[django.core.validators.MaxLengthValidator(511)],
                    ),
                ),
                (
                    "group",
                    models.CharField(
                        choices=[
                            ("bloom", "Bloomworks"),
                            ("acf", "ACF: Administration for Children and Families"),
                            ("acl", "ACL: Administration for Community Living"),
                            (
                                "aspr",
                                "ASPR: Administration for Strategic Preparedness and Response",
                            ),
                            ("cdc", "CDC: Centers for Disease Control and Prevention"),
                            ("cms", "CMS: Centers for Medicare & Medicaid Services"),
                            (
                                "hrsa",
                                "HRSA: Health Resources and Services Administration",
                            ),
                            ("ihs", "IHS: Indian Health Service"),
                            ("staging", "Staging environment"),
                        ],
                        default="bloom",
                        help_text="The OpDiv group for this document. The group controls access to a document. The 'Bloomworks' group hides documents from OpDiv users.",
                        max_length=16,
                        validators=[django.core.validators.MaxLengthValidator(16)],
                    ),
                ),
                (
                    "opdiv",
                    models.CharField(
                        help_text="The HHS operating division (eg, HRSA, CDC)",
                        max_length=511,
                        validators=[django.core.validators.MaxLengthValidator(511)],
                        verbose_name="Operating Division",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("draft", "Draft"),
                            ("active", "Active"),
                            ("ready-for-qa", "Ready\xa0for\xa0QA"),
                            ("review", "In\xa0review"),
                            ("doge", "Dep Sec"),
                            ("published", "Published"),
                            ("paused", "Paused"),
                            ("cancelled", "Cancelled"),
                        ],
                        default="draft",
                        help_text="The status of this document in the NOFO Builder.",
                        max_length=32,
                        validators=[django.core.validators.MaxLengthValidator(32)],
                    ),
                ),
                (
                    "archived",
                    models.DateField(
                        blank=True,
                        default=None,
                        help_text="Archived documents are soft-deleted: they are not visible in the UI but can be recovered by superusers.",
                        null=True,
                    ),
                ),
                ("created", models.DateTimeField(auto_now_add=True)),
                ("updated", models.DateTimeField(auto_now_add=True)),
                (
                    "title",
                    models.TextField(
                        blank=True,
                        max_length=250,
                        validators=[django.core.validators.MaxLengthValidator(250)],
                        verbose_name="Document name",
                    ),
                ),
                (
                    "from_nofo",
                    models.ForeignKey(
                        blank=True,
                        help_text="If this Compare Document was cloned from a NOFO, this is the source NOFO.",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="derived_compare_documents",
                        to="nofos.nofo",
                    ),
                ),
                (
                    "successor",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="ancestors",
                        to="compare.comparedocument",
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="The last logged-in user who modified this document.",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Compare Document",
                "verbose_name_plural": "Compare Documents",
            },
        ),
        migrations.CreateModel(
            name="CompareSection",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                (
                    "name",
                    models.TextField(
                        max_length=250,
                        validators=[django.core.validators.MaxLengthValidator(250)],
                        verbose_name="Section name",
                    ),
                ),
                (
                    "html_id",
                    models.CharField(
                        max_length=511,
                        validators=[django.core.validators.MaxLengthValidator(511)],
                    ),
                ),
                ("order", models.IntegerField(null=True)),
                (
                    "has_section_page",
                    models.BooleanField(
                        default=True,
                        help_text="If true, this section will have its own page and icon in the ToC.",
                        verbose_name="Has section page?",
                    ),
                ),
                (
                    "html_class",
                    models.CharField(
                        blank=True,
                        default="",
                        max_length=1023,
                        validators=[django.core.validators.MaxLengthValidator(1023)],
                        verbose_name="HTML class attribute",
                    ),
                ),
                (
                    "document",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="sections",
                        to="compare.comparedocument",
                    ),
                ),
            ],
            options={
                "ordering": ["order"],
                "unique_together": {("document", "order")},
            },
        ),
        migrations.CreateModel(
            name="CompareSubsection",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                (
                    "name",
                    models.TextField(
                        blank=True,
                        max_length=400,
                        validators=[django.core.validators.MaxLengthValidator(400)],
                        verbose_name="Subsection name",
                    ),
                ),
                (
                    "html_id",
                    models.CharField(
                        blank=True,
                        max_length=511,
                        validators=[django.core.validators.MaxLengthValidator(511)],
                        verbose_name="HTML id attribute",
                    ),
                ),
                (
                    "html_class",
                    models.CharField(
                        blank=True,
                        default="",
                        max_length=1023,
                        validators=[django.core.validators.MaxLengthValidator(1023)],
                        verbose_name="HTML class attribute",
                    ),
                ),
                ("order", models.IntegerField(null=True)),
                (
                    "tag",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("h2", "Heading 2"),
                            ("h3", "Heading 3"),
                            ("h4", "Heading 4"),
                            ("h5", "Heading 5"),
                            ("h6", "Heading 6"),
                            ("h7", "Heading 7"),
                        ],
                        max_length=2,
                        validators=[django.core.validators.MaxLengthValidator(2)],
                    ),
                ),
                (
                    "callout_box",
                    models.BooleanField(
                        default=False,
                        help_text="Make this subsection a callout box.",
                        verbose_name="Callout box",
                    ),
                ),
                (
                    "body",
                    martor.models.MartorField(
                        blank=True, verbose_name="Content of subsection"
                    ),
                ),
                (
                    "comparison_type",
                    models.CharField(
                        choices=[
                            ("none", "Do not compare"),
                            ("name", "Compare name"),
                            ("body", "Compare name and all text"),
                            ("diff_strings", "Compare name and required strings"),
                        ],
                        default="body",
                        max_length=20,
                    ),
                ),
                (
                    "diff_strings",
                    models.JSONField(
                        blank=True,
                        default=list,
                        help_text="List of required strings that must be present in the body.",
                    ),
                ),
                (
                    "section",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="subsections",
                        to="compare.comparesection",
                    ),
                ),
            ],
            options={
                "ordering": ["order"],
                "unique_together": {("section", "order")},
            },
        ),
    ]
